#!/bin/bash
# New Swing Project (NSP) - Main Script
# Created by Daniel Dahlberg
# License: MIT
# Description: This script sets up a new Java Swing project with optional flags for customization.
# The icons generated by the -i and --icon flags are provided by https://fontawesome.com/


# Flag processing functions
FLAG_FUNCTIONS=("process_one_frame_flag" "process_separate_flag" "process_icon_flag")


# Load and verify util functions
__load_util_functions() {
  source $UTILS_SCRIPT
  local -r UTIL_FUNCTIONS=("check_usage" "check_flags" "print_verbose" "handle_error" "create_temp_dir")
  check_source_success ${UTIL_FUNCTIONS[@]}
}

# Initialize variables and paths, and setup global error handling
__setup_vars_and_error_handling() {
  __init_path_and_flags() {
    local -r PROJECT_NAME=$1
    readonly PROJECT_ROOT=$(pwd)/$PROJECT_NAME
    shift
    readonly FLAGS="$@"
  }

  __init_script_paths() {
    local -r SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" &> /dev/null && pwd)"
    readonly AUX_DIR="$SCRIPT_DIR/../share/nsp"
    local -r AUX_SCRIPTS_DIR="$AUX_DIR/Scripts"
    readonly UTILS_SCRIPT="$AUX_SCRIPTS_DIR/utils.sh"
    readonly FLAGS_SCRIPT="$AUX_SCRIPTS_DIR/flags.sh"
  }

  __init_path_and_flags "$@"
  __init_script_paths "$@"
  VERBOSE=false
  trap 'handle_error ${LINENO}' ERR
  readonly READY=true
}

# Check if setup is complete
__check_ready() {
  if [ -z $READY ]; then
    local -r MSG="__setup_vars_and_error_handling must be run before executing the rest of the program"
    handle_error $LINENO $MSG
  fi
}

# Validate script usage and flags
__validate_usage() {
  local -r USAGE="<string> [flags...]"
  check_usage "$@" $USAGE
  shift
  check_flags "$@"
}

# Create project structure based on flags
__create_project() (
  __check_temp_dir() {
    if [ ! -d $TEMP_DIR ]; then
      local -r MSG="You must first create a temporary directory for storing the project during initialization."
      handle_error $LINENO $MSG
    fi
  } 

  __process_flags() {
    source $FLAGS_SCRIPT
    check_source_success ${FLAG_FUNCTIONS[@]}

    __process_flag() {
      local ARG=$1

      __process_verbose_flag() {
        if [[ $ARG == *"v"* ]]; then
          VERBOSE=true
          ARG=${ARG//v/}
        fi

        readonly VERBOSE
      }

      __process_short_flags() {
        local -r SHORT_FLAG="Processing short flag"

        while getopts "osiu" OPT; do
          case $OPT in
            o)
              print_verbose "${SHORT_FLAG} -1"
              process_one_frame_flag
              ;;
            s)
              print_verbose "${SHORT_FLAG} -s"
              process_separate_flag
              ;;
            i)
              print_verbose "${SHORT_FLAG} -i"
              process_icon_flag
              ;;
            u)
              print_verbose "${SHORT_FLAG} -u"
              process_util_flag
              ;;
            \?)
              local -r MSG="Argument is not a valid short flag." >&2
              handle_error $LINENO "$MSG"
              ;;
          esac
        done
      }

      __process_long_flags() {
        local -r LONG_FLAG="Processing long flag"
        local ARG=$1

        case $ARG in
          --oneFrame)
            print_verbose "${LONG_FLAG} --oneFrame"
            process_one_frame_flag
            ;;
          --separate)
            print_verbose "${LONG_FLAG} --separate"
            process_separate_flag
            ;;
          --icon)
            print_verbose "${LONG_FLAG} --icon"
            process_icon_flag
            ;;
          --util)
            print_verbose "${LONG_FLAG} --util"
            process_util_flag
            ;;
          *)
            local -r MSG="Argument $ARG is not a valid long flag."
            handle_error $LINENO "$MSG"
            ;;
        esac
      }

      __determine_flag_type() {
        if [[ "$ARG" == --* ]]; then
          __process_long_flags "$ARG"
        elif [[ "$ARG" == -* ]]; then
          __process_short_flags "$ARG"
        else
          local -r MSG="Argument '$ARG' is not a valid flag."
          handle_error $LINENO $MSG
        fi
      }

        __process_verbose_flag
        __determine_flag_type
      }

    for ARG in $FLAGS; do
      __process_flag "$ARG"
    done
  }

  __move_temp_dir_to_project_root() {
    if [ ! -d $PROJECT_ROOT ]; then
      mkdir $PROJECT_ROOT
    else
      if [ ! -z "$(ls -A $PROJECT_ROOT)" ]; then
        local -r MSG="There is already a folder with the same as the project that contains files."
        handle_error $LINENO $MSG
      fi
    fi

    mv $TEMP_DIR/* $PROJECT_ROOT
  }

  create_temp_dir
  __check_temp_dir
  __process_flags
  __move_temp_dir_to_project_root

  echo "The project was successfully initialized."
)

__setup_vars_and_error_handling "$@"
__load_util_functions
__check_ready
__validate_usage "$@"
__create_project
